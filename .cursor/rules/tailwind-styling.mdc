---
globs: resources/js/**/*.vue,resources/css/**/*.css
description: Tailwind CSS styling patterns and utility usage
---

# Tailwind CSS Styling Patterns

## Tailwind CSS 4 Configuration

- **Version**: Tailwind CSS 4.x with Vite plugin
- **Configuration**: Uses `@tailwindcss/vite` plugin in [vite.config.ts](mdc:vite.config.ts)
- **CSS File**: Main styles in [resources/css/app.css](mdc:resources/css/app.css)
- **JIT Mode**: Just-in-time compilation for optimal bundle size

## Utility-First Approach

- **Classes**: Use utility classes for styling instead of custom CSS
- **Responsive**: Use responsive prefixes (sm:, md:, lg:, xl:, 2xl:)
- **States**: Use state variants (hover:, focus:, active:, disabled:)
- **Dark Mode**: Use dark: prefix for dark mode styles

## Component Styling

- **Scoped Styles**: Use `scoped` attribute in Vue components
- **CSS Variables**: Use CSS custom properties for theming
- **Component Variants**: Use class-variance-authority (CVA) for component variants
- **Conditional Classes**: Use computed properties for dynamic classes

## Layout Patterns

- **Grid**: Use CSS Grid utilities for complex layouts
- **Flexbox**: Use Flexbox utilities for component alignment
- **Spacing**: Use consistent spacing scale (4, 8, 12, 16, 20, 24px)
- **Typography**: Use typography utilities for text styling

## Common Patterns

```vue
<template>
  <!-- Responsive grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <!-- Cards with consistent styling -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
      <!-- Content -->
    </div>
  </div>

  <!-- Button variants -->
  <button class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors">
    Click me
  </button>

  <!-- Form styling -->
  <input class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
</template>
```

## Animation and Transitions

- **Transitions**: Use Tailwind's transition utilities
- **Animations**: Use `tw-animate-css` for additional animations
- **Hover Effects**: Smooth transitions on interactive elements
- **Loading States**: Use opacity and transform for loading indicators

## Dark Mode Support

- **Theme Toggle**: Implement theme switching with Vue composables
- **CSS Variables**: Use CSS custom properties for theme colors
- **Automatic**: Use `dark:` prefix for dark mode variants
- **System Preference**: Respect user's system theme preference
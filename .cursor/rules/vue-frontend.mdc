---
globs: resources/js/**/*.vue,resources/js/**/*.ts,resources/js/**/*.tsx
description: Vue 3 + TypeScript frontend development patterns and best practices
---

# Vue 3 + TypeScript Frontend Development

## Vue 3 Composition API

- **Setup Function**: Use `<script setup>` syntax for all components
- **Reactivity**: Use `ref()` and `reactive()` for reactive state
- **Computed**: Use `computed()` for derived state
- **Watchers**: Use `watch()` and `watchEffect()` for side effects
- **Lifecycle**: Use `onMounted()`, `onUnmounted()`, etc. instead of options API

## Component Structure

```vue
<template>
  <!-- Template with proper accessibility and semantic HTML -->
</template>

<script setup lang="ts">
// Imports
// Props with TypeScript interfaces
// Reactive state
// Computed properties
// Methods
// Lifecycle hooks
</script>

<style scoped>
/* Component-specific styles using Tailwind CSS */
</style>
```

## TypeScript Integration

- **Type Definitions**: Located in [resources/js/types](mdc:resources/js/types)
- **Interfaces**: Define props, emits, and data structures with TypeScript
- **Type Safety**: Use strict TypeScript configuration from [tsconfig.json](mdc:tsconfig.json)
- **Vue Types**: Import Vue types for component props and emits

## File Organization

- **Pages**: Located in [resources/js/pages](mdc:resources/js/pages) - Inertia.js page components
- **Components**: Located in [resources/js/components](mdc:resources/js/components) - Reusable Vue components
- **Layouts**: Located in [resources/js/layouts](mdc:resources/js/layouts) - Page layout components
- **Composables**: Located in [resources/js/composables](mdc:resources/js/composables) - Reusable composition functions
- **Services**: Located in [resources/js/services](mdc:resources/js/services) - API and business logic
- **Actions**: Located in [resources/js/actions](mdc:resources/js/actions) - Inertia.js form actions

## Styling

- **Tailwind CSS 4**: Use utility classes for styling
- **Component Variants**: Use class-variance-authority (CVA) for component variants
- **CSS Variables**: Use CSS custom properties for theming
- **Responsive Design**: Use Tailwind's responsive prefixes (sm:, md:, lg:, xl:)

## State Management

- **Composables**: Create custom composables for shared state
- **VueUse**: Use [@vueuse/core](mdc:resources/js/composables) utilities
- **Local Storage**: Use VueUse's useLocalStorage for persistence
- **Reactive State**: Use Pinia if complex state management is needed

## Performance

- **Lazy Loading**: Use dynamic imports for code splitting
- **Virtual Scrolling**: For large lists
- **Memoization**: Use `computed()` for expensive calculations
- **Component Optimization**: Use `shallowRef()` for non-reactive objects
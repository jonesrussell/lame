---
globs: *.vue,*.ts,*.tsx,resources/js/**/*.vue,resources/js/**/*.ts,resources/js/**/*.tsx
---

# Vue 3 + TypeScript Frontend Development Rules

## Component Architecture

- Use Vue 3 Composition API with `<script setup>` syntax
- Use TypeScript for all components and composables
- Follow Vue 3 best practices and conventions
- Use Inertia.js for page components in `resources/js/pages/`
- Use reusable components in `resources/js/components/`

## Key Directories

- [resources/js/pages/](mdc:resources/js/pages/) - Inertia.js page components
- [resources/js/components/](mdc:resources/js/components/) - Reusable Vue components
- [resources/js/layouts/](mdc:resources/js/layouts/) - Layout components
- [resources/js/composables/](mdc:resources/js/composables/) - Vue 3 composables
- [resources/js/types/](mdc:resources/js/types/) - TypeScript type definitions

## Code Style and Standards

- Use ESLint with Vue + TypeScript rules (configured in [eslint.config.js](mdc:eslint.config.js))
- Use Prettier for code formatting with Tailwind CSS plugin
- Use TypeScript strict mode (enabled in [tsconfig.json](mdc:tsconfig.json))
- Use `@/*` path alias for imports (configured in tsconfig.json)

## Component Guidelines

- Use PascalCase for component names
- Use kebab-case for component files
- Use TypeScript interfaces for props and emits
- Use Vue 3's `<script setup>` syntax
- Use `defineProps()` and `defineEmits()` for component API
- Use `ref()` and `reactive()` for reactive state
- Use `computed()` for derived state

## UI Framework

- Use Tailwind CSS for styling (v4 with Vite plugin)
- Use Reka UI components from `resources/js/components/ui/`
- Use Lucide Vue Next for icons
- Use Class Variance Authority (CVA) for component variants
- Use `clsx` and `tailwind-merge` for conditional classes

## Development Tools

- Hot reloading enabled via Vite
- TypeScript compilation happens automatically
- ESLint runs on save with auto-fix
- Prettier formats code on save